<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zjx.mapper.UserBeamMapper" >
  <resultMap id="BaseResultMap" type="com.zjx.model.UserBean" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="account" property="account" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="is_del" property="isDel" jdbcType="INTEGER" />
    <result column="city" property="cityId" jdbcType="INTEGER" />
    <result column="address" property="address" jdbcType="VARCHAR" />
    <result column="created_time" property="createTime" jdbcType="VARCHAR" />
    <result column="role_id" property="roleId" jdbcType="INTEGER" />

  </resultMap>
  <sql id="Base_Column_List" >
    id, account, name, password, email, phone, is_del, city, address, created_time
  </sql>

  <select id="getUserInfo" resultType="com.zjx.model.UserBean">
    select
    id,
    account,
    password,
    name as name,
    email,
    phone,
    is_del as isDel,
    city as cityId,
    address,
    created_time as createTime
    from um_t_user
    where account = #{account}
    and password = #{password}
    and is_del = 0
  </select>

  <select id="getUserByNickname" resultType="com.zjx.model.UserBean">
    select
    id,
    account,
    password,
    name as name,
    email,
    phone,
    is_del as isDel,
    city as cityId,
    address,
    created_time as createTime
    from um_t_user
    where account = #{name}
    and is_del = 0
  </select>

  <insert id="saveUser" parameterType="com.zjx.model.UserBean" useGeneratedKeys="true" keyProperty="id">
    insert into um_t_user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="account != null" >
        account,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="cityId != null" >
        city,
      </if>
      <if test="roleId != null" >
        role_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="account != null" >
        #{account,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="cityId != null" >
        #{cityId,jdbcType=INTEGER},
      </if>
      <if test="roleId != null" >
        #{roleId},
      </if>
    </trim>
  </insert>

  <insert id="insertToken">
    insert into token
    (user_id, token_get, token_residue, token_cunsume, update_time)
    values
    (#{userId}, 0, 0, 0, NOW())
  </insert>

  <select id="getCityInfo" resultType="com.zjx.model.City">
    SELECT
    c.city_id as cityId,
    c.city_name as cityName
    FROM
    city c
    WHERE
    1=1
  </select>

  <select id="getCityName" resultType="java.lang.Integer">
    SELECT
    c.city_id as cityId
    FROM
    city c
    WHERE
    c.city_name = #{cityName}
  </select>
</mapper>
  <!--<insert id="insert" parameterType="com.unionman.springbootsecurityauth2.model.BlockChain" >
    insert into block_chain (id, block_number, node_number, 
      grant_token_number, consum_token_number)
    values (#{id,jdbcType=INTEGER}, #{blockNumber,jdbcType=INTEGER}, #{nodeNumber,jdbcType=INTEGER}, 
      #{grantTokenNumber,jdbcType=INTEGER}, #{consumTokenNumber,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.unionman.springbootsecurityauth2.model.BlockChain" >
    insert into block_chain
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="blockNumber != null" >
        block_number,
      </if>
      <if test="nodeNumber != null" >
        node_number,
      </if>
      <if test="grantTokenNumber != null" >
        grant_token_number,
      </if>
      <if test="consumTokenNumber != null" >
        consum_token_number,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="blockNumber != null" >
        #{blockNumber,jdbcType=INTEGER},
      </if>
      <if test="nodeNumber != null" >
        #{nodeNumber,jdbcType=INTEGER},
      </if>
      <if test="grantTokenNumber != null" >
        #{grantTokenNumber,jdbcType=INTEGER},
      </if>
      <if test="consumTokenNumber != null" >
        #{consumTokenNumber,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.unionman.springbootsecurityauth2.model.BlockChain" >
    update block_chain
    <set >
      <if test="blockNumber != null" >
        block_number = #{blockNumber,jdbcType=INTEGER},
      </if>
      <if test="nodeNumber != null" >
        node_number = #{nodeNumber,jdbcType=INTEGER},
      </if>
      <if test="grantTokenNumber != null" >
        grant_token_number = #{grantTokenNumber,jdbcType=INTEGER},
      </if>
      <if test="consumTokenNumber != null" >
        consum_token_number = #{consumTokenNumber,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.unionman.springbootsecurityauth2.model.BlockChain" >
    update block_chain
    set block_number = #{blockNumber,jdbcType=INTEGER},
      node_number = #{nodeNumber,jdbcType=INTEGER},
      grant_token_number = #{grantTokenNumber,jdbcType=INTEGER},
      consum_token_number = #{consumTokenNumber,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getAllBlockChain" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from block_chain
  </select>-->
